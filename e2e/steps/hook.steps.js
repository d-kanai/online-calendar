const { Before, After, BeforeAll, AfterAll, Status } = require('@cucumber/cucumber');
const { PrismaClient } = require('@prisma/client');
const { chromium } = require('@playwright/test');
const CalendarPage = require('../page-objects/CalendarPage');
const MeetingFormPage = require('../page-objects/MeetingFormPage');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();
let browser;
let page;

// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å®„Åó„Å¶Page Object„ÇíÂÆöÁæ©
global.calendarPage = null;
global.meetingFormPage = null;

// „ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„ÉàÈñãÂßãÊôÇ„Å´„Éñ„É©„Ç¶„Ç∂„ÇíËµ∑Âãï
BeforeAll(async function () {
  // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠ò„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
  const screenshotsDir = path.join(process.cwd(), 'e2e', 'screenshots');
  if (!fs.existsSync(screenshotsDir)) {
    fs.mkdirSync(screenshotsDir, { recursive: true });
  }
  
  // Áí∞Â¢ÉÂ§âÊï∞„Åßheadless„É¢„Éº„Éâ„ÇíÂà∂Âæ°Ôºà„Éá„Éï„Ç©„É´„Éà„ÅØheadlessÔºâ
  const headless = process.env.E2E_HEADLESS !== 'false';
  const isDebugMode = process.env.E2E_HEADLESS === 'false';
  
  browser = await chromium.launch({ headless });
  page = await browser.newPage();
  
  // „Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÇíÂ∏∏„Å´Âá∫Âäõ
  page.on('console', async msg => {
    const type = msg.type();
    const args = await Promise.all(msg.args().map(arg => arg.jsonValue().catch(() => arg.toString())));
    console.log(`[Browser ${type}]`, ...args);
  });
  
  page.on('pageerror', error => {
    console.error('[Browser Error]', error.message);
  });
  
  page.on('requestfailed', request => {
    if (!request.url().includes('_next/static')) {
      console.error('[Network Error]', `${request.method()} ${request.url()} failed: ${request.failure().errorText}`);
    }
  });
  
  // API„É¨„Çπ„Éù„É≥„Çπ„Çí„É≠„Ç∞Âá∫Âäõ
  page.on('response', async response => {
    if (response.url().includes('/api/')) {
      console.log(`[API] ${response.status()} ${response.url()}`);
      if (response.status() >= 400) {
        try {
          const body = await response.text();
          console.error('[API Error Response]', body);
        } catch (e) {
          console.error('[API Error] Could not read response body');
        }
      }
    }
  });
  
  // Page Object„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
  global.calendarPage = new CalendarPage(page);
  global.meetingFormPage = new MeetingFormPage(page);
});

// „ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„ÉàÁµÇ‰∫ÜÊôÇ„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÁµÇ‰∫Ü
AfterAll(async function () {
  try {
    if (page) {
      await page.close();
      page = null;
    }
    if (browser) {
      await browser.close();
      browser = null;
    }
    await prisma.$disconnect();
  } catch (error) {
    console.log('Cleanup error:', error);
  }
});

// Before hook for scenario logging
Before(async function (scenario) {
  console.log(`\nüöÄ Starting scenario: ${scenario.pickle.name}`);
});

// After hook for cleanup between scenarios
After(async function (scenario) {
  const status = scenario.result.status;
  
  // FAILED„ÅÆÂ†¥Âêà„ÄÅ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Å®„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂèñÂæó
  if (status === Status.FAILED && page) {
    try {
      // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂèéÈõÜ
      console.log('\n=== üêõ Debug Information ===');
      
      // „Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÇíÂèñÂæó
      const consoleLogs = await page.evaluate(() => {
        const logs = [];
        // „Éñ„É©„Ç¶„Ç∂„ÅÆÂ±•Ê≠¥„Åã„Çâ„É≠„Ç∞„ÇíÂèñÂæóÔºàÂÆüÈöõ„ÅÆ„Éñ„É©„Ç¶„Ç∂API„Åß„ÅØ‰∏çÂèØËÉΩ„Å™„ÅÆ„Åß„ÄÅ‰ª£ÊõøÊ°àÔºâ
        return logs;
      });
      
      // ÁèæÂú®„ÅÆURL„ÇíÂá∫Âäõ
      const currentUrl = page.url();
      console.log(`Current URL: ${currentUrl}`);
      
      // „Éö„Éº„Ç∏„Çø„Ç§„Éà„É´„ÇíÂá∫Âäõ
      const pageTitle = await page.title();
      console.log(`Page Title: ${pageTitle}`);
      
      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      const errorElements = await page.locator('[role="alert"]').all();
      if (errorElements.length > 0) {
        console.log('\nüö® Error Messages Found:');
        for (const element of errorElements) {
          const text = await element.textContent();
          console.log(`  - ${text}`);
        }
      }
      
      // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Çí‰øùÂ≠ò
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const featureName = scenario.pickle.uri.split('/').pop().replace('.feature', '');
      const scenarioName = scenario.pickle.name.replace(/[^a-zA-Z0-9]/g, '_');
      const screenshotPath = path.join(
        process.cwd(),
        'e2e',
        'screenshots',
        `${featureName}_${scenarioName}_${timestamp}.png`
      );
      
      await page.screenshot({
        path: screenshotPath,
        fullPage: true
      });
      
      console.log(`\nüì∏ Screenshot saved: ${screenshotPath}`);
      console.log('=== End Debug Information ===\n');
      
    } catch (error) {
      console.error('Error capturing debug information:', error);
    }
  }
  
  // „Ç∑„Éä„É™„Ç™Èñì„Åß„Éö„Éº„Ç∏„ÇíÂÜçÂà©Áî®„Åô„Çã„Åü„ÇÅ„ÄÅÂêÑ„Ç∑„Éä„É™„Ç™Âæå„ÅØ„Éö„Éº„Ç∏„Çí„ÇØ„É™„Ç¢„ÅÆ„Åø
  if (page) {
    await page.evaluate(() => {
      localStorage.clear();
      sessionStorage.clear();
    });
  }
  
  const statusEmoji = status === 'PASSED' ? '‚úÖ' : '‚ùå';
  console.log(`${statusEmoji} Scenario completed: ${scenario.pickle.name} (${status})`);
});